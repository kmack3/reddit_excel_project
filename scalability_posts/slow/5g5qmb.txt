slow
5g5qmb
Custom function is super fast in Excel 2010 but very slow in 2016

I recently made a custom function that emulates an index/match pair lookup where the lookup range is on multiple sheets.  This necessitates essentially 3 find operations per cell calculation: (1) to get an offset column, (2) to get a sheetname, and (3) to return the results of the offset.  So, it's fairly calc intensive. 

This function took a long time to write and optimize, and was working well in Excel 2010.  When this custom function was put into roughly 2000 cells, recalc time was under 2-3 seconds.  

We recently upgraded to Excel 2016 and with the same code the recalc time is over 5 minutes.  Are there settings in 2016 that we need to change in order to speed up functions?  

Thanks.


-------------
The function basically does the following.  The UDF is written in the cell something like =custFunc($A5).  This is then copied to numerous cells and sheets to build a custom data report.  Column A in the formula is a lookup value.

1. The UDF returns the column it's in and then Finds that column in a lookup table.  It then gets an offset that corresponds with the column in the data it needs to pull.  The lookup table is 15 rows.

2. The UDF then gets the lookup value from the formula ($A5, in this case), and looks that value up in a lookup table to get the sheetname where it's found.  This lookup table is 500 rows.

3. The UDF then goes to that sheet from step2, finds the lookup value and returns the value in the offset column found in step 1.    Each search range is 100 rows.

It seems step 3 is the sticky one, but I can't tell exactly.

Here's step 3:

    Dim dataRangeName As String
    Dim dataRange As Range
    Dim myCodeFind As Range

    dataRangeName = "DATA." & sSheetname '(from step 2)
    Set dataRange = Range(dataRangeName)

    Set myCodeFind = dataRange.Columns(2).Find(sCode, , , xlWhole) '(sCode is from the formula - $A5)
    If myCodeFind Is Nothing Then GoTo myNext 'msgbox "code not found"
    If Not myCodeFind Is Nothing Then custFunc = myCodeFind.Offset(0, dCol).Value: Exit Function   'dCol is offset column in step 1

-------------
Did the change from Excel 2010 to Excel 2016 involve any change between 32-bit and 64-bit versions?
-------------
You need to profile your udf, which means putting it in another workbook and adding Debug.Print statements to it. Added code would look something like

    Function custFunc(arg As whatever) As whatever
      Dim dt As Date
      dt = Now
      '** your preliminary code
      Debug.Print "prelim "; (Now - dt) * 86400#  'seconds prelim took
      dt = Now
      '** step 1
      '** your step 1 code
      Debug.Print "step 1 "; (Now - dt) * 86400#  'seconds step 1 took
      dt = Now
      '** your step 2 code
      Debug.Print "step 2 "; (Now - dt) * 86400#  'seconds step 2 took
      dt = Now
      '** your step 3 code
      Debug.Print "step 3 "; (Now - dt) * 86400#  'seconds step 3 took
      dt = Now
      '** your wrap-up code
      Debug.Print "wrap-up "; (Now - dt) * 86400#  'seconds wrap-up took
      dt = Now
    End Function

Call custFunc from a macro, then check the Immediate Window to see the time duration results.

I'm not sure anyone else could spot the problem without seeing the entire udf. Does the udf include a statement which makes it volatile?
-------------
No, both 32-bit

-------------
Thanks.  I'll try that.  I read that using Offset makes it volatile.  Could that be it?

I'm trying to change my Offsets (there's 1 in each step) to Cells(r,c).Value.  Might that be better?
-------------
I used the Timer function and looped the lookup 5000 times.  It finished in 10.30 seconds.  I'm not sure why it takes so long when it's in every cell.
-------------
The worksheet function OFFSET is volatile, but the Range object property .Offset isn't directly linked into Excel's recalculation process.

To repeat, without seeing all of your VBA code, I can only guess, and at this point I've done all the guessing I can.
-------------
Here's the whole thing (hope the comments make sense):

    Function cusFunc(sCodeCell As Range) As Variant

    ' in cell looks like =cusFunc($A5) where column A has the lookup codes.  Then this is copied to other cells in table

    ' PURPOSE:  this UDF is used on summary sheets to grab values from data sheets.
    ' STEP 1: Gets the summary sheet column then translates that to the correct data column by searching an offset table
    ' STEP 2: Gets the correct sheetname where the lookup code is found.  Code could be on one of 6 sheets.  Lookup table has the correct sheet.
    ' STEP 3: Looks for the code on that sheet from step 2
    ' OUTPUT: Returns the value using the offset from step 1
    '------------------------
    'STEP 1: get offset column

    'get the data column number:
    Dim sCol As Integer
    sCol = Application.Caller.Column

    'lookup this number in offset range
    Dim sResult As Range
    Set sResult = Range("INFO.OFFSETS").Columns(1).Find(sCol, LookIn:=xlValues)

    'get data column from offset table
    Dim dCol As Integer
    If Not sResult Is Nothing Then dCol = sResult.Offset(0, 1) 

    'get code to look for in datasheets
    sCode = sCodeCell.Value

    '--------------------------
    'STEP 2: lookup the sheetname from the code lookup table
    
    Dim sSheetname As String
    Dim mySheetFind As Range

    'Get sheetname from lookup table
    Set mySheetFind = Range("INFO.CODREF").Columns(1).Find(sCode, , , xlWhole)
    If mySheetFind Is Nothing Then GoTo myNext
    If Not mySheetFind Is Nothing Then sSheetname = mySheetFind.Offset(0, 1).Value

    '-----------------------
    'STEP 3: look for code on sheet found in step 2 and get offset

    Dim dataRangeName As String
    Dim dataRange As Range
    Dim myCodeFind As Range

    dataRangeName = "DATA." & sSheetname
    Set dataRange = Range(dataRangeName)

    Set myCodeFind = dataRange.Columns(2).Find(sCode, , , xlWhole)
    If myCodeFind Is Nothing Then GoTo myNext

    'OUTPUT: get data from lookup col (offset -2 since lookup value is in col 2)
    If Not myCodeFind Is Nothing Then cusFunc = myCodeFind.Offset(0, dCol - 2).Value: Exit Function

    myNext:
      MsgBox ("Code not found")

    End Function
-------------
A few preliminary observations. Safer to qualify Range calls as ActiveSheet.Range. Also safer to check whether Application.Caller is a Range object, and if not exit quickly. Finally, functions calling MsgBox is OK during development and testing, but a very bad idea in production code, especially if called many times. If you had a cell C3 formula =cusFunc(C2) which woked because C2 contained a value in DATA.SomeSheetName but D2:ZZ2 were blank, and you copied C3 into D3:ZZ3, all those 699 cusFunc calls in D3:ZZ3 would fail, and every one of them would call MsgBox, so you'd either need to OK all 699 dialogs or use Task Manager to kill Excel.

cusFunc returns a Variant. If there's no match, have it return #N/A. For example, replace line 36 with

    If mySheetFind Is Nothing Then
      cusFunc = CVErr(xlErrNA)
      Exit Function
    End If

and delete the myNext: section.

You may have a potential bug. In Step 1/line 23 you check whether sResult is Nothing and if not set dCol, but you don't exit if sResult were Nothing. If sResult were Nothing, then dCol would be 0, so in Step 3/line 53 the 2nd argument to .Offset would evaluate to -2, so would be one column to the left of the 1st column in dataRange.

You could use worksheet functions for this. Step 1 dCol would be

    VLOOKUP(COLUMN(),INFO.OFFSETS,2,0)

Step 2 sSheetName would be

    VLOOKUP(sCodeCell,INFO.CODREF,2,0)

Step 3 myCodeFind.Row would be

    MATCH(sCodeCell,INDEX(INDIRECT("DATA."&VLOOKUP(sCodeCell,INFO.CODREF,2,0)),0,2),0)

And the end result would be

    =INDEX(INDIRECT("DATA."&VLOOKUP(sCodeCell,INFO.CODREF,2,0)),MATCH(sCodeCell,INDEX(INDIRECT("DATA."&VLOOKUP(sCodeCell,INFO.CODREF,2,0)),0,2),0),VLOOKUP(COLUMN(),INFO.OFFSETS,2,0)-1)

Your udf isn't volatile, but it won't recalculate automatically if any cell(s) in INFO.OFFSETS, INFO.CODREF or DATA.SomeSheetName change because there are no references to those ranges in the udf's arguments, so no way for Excel's recalculation engine to know that cells calling cusFunc depend on those ranges.

It's possible, though I can't confirm it, that Excel 2016 somehow does see that you're calling a udf which does use values from cells other than its sCodeCell argument, and that's may be what causes the slow-down in Excel 2016.

How many DATA.* named ranges are there? If 28 or fewer, you could use CHOOSE to pick the one you need rather than INDIRECT in worksheet formulas.
-------------
Thanks very much.  I'll digest this and see how it works.  
-------------
The formulas work great, but as it turns out my data sheets are not contiguous enough to run all those vlookups.  Thanks again for all the help though.  Doing more googling it looks like there's some sort of bug or other issue in 2016 that makes calculations painfully slow.  Maybe it will be fixed in another update.  Oh well.

Solution verified
-------------

You have awarded one point to _hrlngrv_.    
[^Find ^out ^more ^here.](https://www.reddit.com/r/excel/wiki/clippy)

-------------
VLOOKUP does't require entire ranges be filled. With 4th argument 0 or FALSE, VLOOKUP finds the topmost match. The Range object's .Find does the same.
-------------
Thanks.  With your suggestions I was able to get rid of a whole step in the code, so it's more efficient.  However, I'd love to fix the root issue, which is that Excel 2010 can handle this in less than 5 seconds, where Excel 2016 takes more than 5 minutes.  
