slow
4ih5ib
String Trim is slow, trimming rows not needed, need help optimizing.

Hey, I have a work book using the following formula

    =IFERROR(INDEX('Order Data'!A:V, MATCH(Workspace!A2, 'Order Data'!A:A,0),18),"")

To pull a location from "data" to "workspace" However, the location starts as a very long url string, that I delimit , but it is delimiting every row  in the colum with location info, and then pulling back the ones that match. 

Another thread had a user suggest :

             =IFERROR(RIGHT(INDEX('Driver Data'!A:F,MATCH(Workspace!A2,'Driver Data'!H:H,0),6),LEN(INDEX('Driver Data'!A:F,MATCH(Workspace!A2,'Driver Data'!H:H,0),6))-FIND("|",SUBSTITUTE(INDEX('Driver Data'!A:F,MATCH(Workspace!A2,'Driver Data'!H:H,0),6)," ","|",2))),"")



as a way to find, and then string trim. Is there a way to do this in this instance? I am currently delimiting 3 columns of 2.5k records, which is going really slow.  Here is the delimiting code I grabbed from recorder.
   
        Sheets("Order Data").Activate
              
        Columns("V:V").Select
    
        Selection.TextToColumns destination:=Range("V1"), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
       :=";", FieldInfo:=Array(Array(1, 9), Array(2, 1)), TrailingMinusNumbers:=True
        Selection.TextToColumns destination:=Range("V1"), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
        :="<", FieldInfo:=Array(Array(1, 1), Array(2, 9)), TrailingMinusNumbers:=True
        Selection.Replace What:=",", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        Range("V1").Value = "Dest City/State"
        
         Columns("R:R").Select
    
        Selection.TextToColumns destination:=Range("R1"), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
       :=";", FieldInfo:=Array(Array(1, 9), Array(2, 1)), TrailingMinusNumbers:=True
        Selection.TextToColumns destination:=Range("R1"), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
        :="<", FieldInfo:=Array(Array(1, 1), Array(2, 9)), TrailingMinusNumbers:=True
        Selection.Replace What:=",", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
            Range("R1").Value = "Origin City/State"
             Columns("L:L").Select
    
        Selection.TextToColumns destination:=Range("L1"), DataType:=xlDelimited, _
            TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
           :=";", FieldInfo:=Array(Array(1, 9), Array(2, 1)), TrailingMinusNumbers:=True
        Selection.TextToColumns destination:=Range("L1"), DataType:=xlDelimited, _
           TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, comma:=False, Space:=False, Other:=True, OtherChar _
        :="<", FieldInfo:=Array(Array(1, 1), Array(2, 9)),     TrailingMinusNumbers:=True
    Selection.Replace What:=",", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
        
        Range("L1").Value = "Varience City/State"
    


Thanks for your help reddit!


-------------
Right off the bat, I'd suggest you stop with the "L:L" bit.    Excel 2007+ supports a bit over a million rows of data.    Unless you have nearly a million rows of data, that is a LOT of wasted operations.

     EndRow = Range("L" & Rows.Count).End(xlup).Row

Will tell you the last value it found in Column "L"..  easily switched if you need it for easy section...

So then instead of "*Columns("L:L").Select*", you could do a "*Range("L1:L" & EndRow).Select*"
-------------
Turn off screen updating.

Then turn it on at the end.
-------------
Will do, how does the end row up bit work? Do I need to do -1 if I have headers, so they don't get split up?
-------------
Doesn't matter.  Excel knows only to use the used range in the entire H:H.

Lack of turning calculations off and screen updating off is a primary candidate for speeding this up.

-------------
Solution Verified!
-------------
Screenupdating=false?
-------------
Solution Verified!
-------------

You have awarded one point to _BornOnFeb2nd_.    
[^Find ^out ^more ^here.](https://www.reddit.com/r/excel/wiki/clippy)

-------------
yes, also application.caclulation=xlmanual then xlautomatic  can have dramatic improvements if you have other data driven from this sheet. 
-------------
Chad has the right idea.  Turning the screen updating off before things that change the worksheet are executed will speed it up.  Just be sure to turn it back on at the end.
-------------

You have awarded one point to _TheChad08_.    
[^Find ^out ^more ^here.](https://www.reddit.com/r/excel/wiki/clippy)

