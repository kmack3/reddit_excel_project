forever
6lebg2
My VBA script is taking FOREVER. I suspect the culprit is this for loop. How can I refactor?

I have two worksheets I'm working with:

One is a spreadsheet of Patient IDs and some information about each ID. One of these columns is "Gap >= 6 Months in Last 2 Years", which is the one I'm interested in.

The other is a report of patients and all of their completed appointments within the last 2 years (the time frame that I'm interested in).

Here are all my variables:

    ' create tracking document variables
    Dim tracking As Worksheet
    Dim tracking_id As Range
    Dim tracking_ids_range As Range
    Dim tracking_header As Range
    Dim tracking_headers_range As Range
    Dim gap_col As Integer

    ' create apts variables
    Dim apts_workbook As Workbook
    Dim apts As Worksheet
    Dim apts_report_location As String
    Dim patient_ids As Range
    Dim pt_id As Range
        
    Set tracking = ActiveSheet

    ' Grab headers and patient IDS from tracking worksheet
    Set tracking_headers_range = tracking.Range("A2", tracking.Range("A2").End(xlToRight))
    Set tracking_ids_range = tracking.Range("A3", tracking.Range("A3").End(xlDown))
  
    
    ' create dict of Patient IDs and Headers from tracking worksheet
    Set tracking_ids = CreateObject("Scripting.Dictionary")
    Set tracking_headers = CreateObject("Scripting.Dictionary")
    
    
    ' dict of Patient IDs and their row from tracking document
    For Each tracking_id In tracking_ids_range
        tracking_ids.Item(tracking_id.Value) = tracking_id.Row
    Next tracking_id
    
    ' dict of headers and their column from tracking document
    For Each tracking_header In tracking_headers_range
        tracking_headers.Add Key:=tracking_header.Value, Item:=tracking_header.Column
    Next tracking_header
    
    ' get file name of apts report
    apts_report_location = Application.GetOpenFilename()
    
    ' open Gap in Care report, set variable
    Set apts_workbook = Workbooks.Open(apts_report_location)
    Set apts = apts_workbook.Sheets("Sheet1")
    Set patient_ids = apts.Range("A2", apts.Range("A2").End(xlDown))
    
    ' Grab headers and patient IDS from Tracking Document
    Set tracking_headers_range = tracking.Range("A2", tracking.Range("A2").End(xlToRight))
    Set tracking_ids_range = tracking.Range("A3", tracking.Range("A3").End(xlDown))
    
    ' Get the column for Gap in Care
    gap_col = tracking_headers.Item("Gap >= 6 Months in Last 2 Years")

This is where things really slow down.

    For Each pt_id In patient_ids
        If tracking_ids.Exists(pt_id.Value) Then
            patient_row_tracking = tracking_ids.Item(pt_id.Value)
            If pt_id.Offset(0, 2).Value >= 6 Or pt_id.Offset(0, 3).Value >= 6 Then
                tracking.Cells(patient_row_tracking, gap_col).Value = "Yes"
            End If
        End If
    Next

It's definitely the for loop; the gap in care worksheet is 5359 rows long.

How can I refactor this thing to speed things up? Thanks!



-------------
This line has the potential to write to a cell each time thru the loop -

    tracking.Cells(patient_row_tracking, gap_col).Value = "Yes"

You should turn of screen updating before this loop starts and enable it again right after. If you don't need to see the progress of the routine till it's over (I didn't read thru the entire code), turn off screen updating at the very beginning and turn it off at the end.

You can get some smaller speed improvements by using an integer variable instead of 6.

You might be better creating an array of pt_id.Value before entering the loop and reading from that rather than accessing a cell each time.
-------------
How efficient is tracking_ids.Exists()?

If tracking_ids is a large range and you're performing some kind of naive search (e.g. iterating through each cell within the range, comparing the value to your search value, until you find a match or reach the end), then this could take an unacceptable amount of time.

Better to load the tracking ids as keys into a Hashtable and checking whether it contains your search value. If you don't want to use a Hashtable, you could use a Collection but I've found them significantly slower when checking for key collisions and I dislike having to turn off error handling just to check for a collision. You could also write your own binary search function, but then you'll need to sort your ids too, and it will still be slower than using a Hashtable.
-------------
Yep, forgot to include it, but I did turn screen updating off. If there was a performance boost, it didn't affect much as I still need to wait ~2 minutes for the loop to run. Unless that seems reasonable?
-------------
    Set tracking_ids = CreateObject("Scripting.Dictionary")
Since `tracking_ids` is a dictionary, I thought this was the equivalent to a hashtable-like solution?


-------------
I don't see where you defined patient_row_tracking. It looks like you're recreating this each time through the loop.
-------------
I'm sorry, I didn't see that declaration the first time I looked. Based on my own experience, Dictionary is not as fast as Hashtable when it comes to checking the existence of keys but it should be faster than a custom implementation, which I feared you might have used. You could try switching to Hashtables to see whether this is the reason (I saw a big improvement with a project that I worked on recently) but I wouldn't be surprised if it didn't help enough.
