slow
63l3tp
Slow calculation/high CPU usage on small/simple macro?

I'm running the following macro on about 57k rows.

    Sub TrimAddress()
    
        Dim r As RegExp
        Set r = New RegExp
        r.Pattern = "\s-\s[0-9].*"
        
        Dim i As Long
        
        For i = 1 To Rows.Count
        
            Cells(i, 7).Value = r.Replace(Cells(i, 7).Value, "")
        
        Next i
      
    End Sub

It takes about 15 -30 seconds to run on a coworkers computer but essentially just takes forever to run on mine and never finishes even after letting it sit for a couple hours. I've tried on two different computers using Excel 2013 and excel 2010 (Which the coworker is using).

Its basically just scanning all the cells in a particular column for a pattern and removing stuff if found. Like I said, takes 30 seconds tops on the coworkers computer using Excel 2010.

No errors. CPU usage just sits at 85-100% and the calculation never finishes.

EDIT: Multiple sheets in this workbook if that makes a difference? I can see the changes taking place so the macro is working.
Just tried breaking it out into a separate sheet and the same issue persists though its only got the CPU at 30-40%


-------------
Reading/writing to the sheet is computationally expensive. Try reading everything into an array, iterating through that, then writing it all back to the sheet. Something lime the following (modified freehand and haven't tested it):

    Sub TrimAddress()
        Dim arr as Variant
        Dim r As RegExp
        Set r = New RegExp
        r.Pattern = "\s-\s[0-9].*"
    
        Dim i As Long
        Total = ActiveSheet.Cells(Rows.Count, 7).End(xlUp).Row
        arr = ActiveSheet.Range("G1:G"&Total).Value
        
        For i = 1 To Total
    
            arr(i) = r.Replace(arr(i), "")
    
        Next i
        ActiveSheet.Range("G1:G"&Total).Value = arr
    End Sub
-------------
When you use rows.count it's going to go loop all the way through every row on the sheet - that's a lot of unnecessary loops if your sheet has 1M+ rows. You need to find the last row of your data using...

    =activesheet.cells(rows.count,7).end(xlup).row

Then replace the rows.count in the for loop with that.
-------------
Maybe you need LudicrousMode!  

    Public Sub LudicrousMode(ByVal Toggle As Boolean)
        Application.ScreenUpdating = Not Toggle
        Application.EnableEvents = Not Toggle
        Application.DisplayAlerts = Not Toggle
        Application.Calculation = IIf(Toggle, xlCalculationManual, xlCalculationAutomatic)
    End Sub

Use it like this:

    Call LudicrousMode(True)
      ' all your code here
    Call LudicrousMode(False)
-------------
All the other suggestions people have are good but have you considered what else you are running that's a resource-hog which may be slowing things down?




As an example, macros run much faster on my computer than on other colleague's computers because I don't have multiple clients assigned to me and so I only have ever one client's database open at a time (can't get into more details exactly because trade secrets), but each of the client's databases is configured as its own application and is a resource hog.





Key thing to check is to open Windows Task Manager, and go to the Process tab and sort by Memory and to look at the Performance tab and the Free Physical Memory amount to see if it's high or low. (These instructions are for Windows 7)
-------------
Put a line in the array that says "do events"
-------------
Agreed.

Could quickly test that this is the problem by doing For i = 1 to 2000 (or wherever your row ends) to see if that does it quicker, then if so, use the above code.
-------------
I've modified the code to 
    
    Sub TrimAddress()
    
        Dim r As RegExp
        Set r = New RegExp
        r.Pattern = "\s-\s[0-9].*"
        
        Dim i As Long
        Total = ActiveSheet.Cells(Rows.Count, 7).End(xlUp).Row
        For i = 1 To Total
        
            Cells(i, 7).Value = r.Replace(Cells(i, 7).Value, "")
        
        Next i
      
    End Sub

Still get the same issue, I've even hard coded the total number of rows and still run into the same issue.

There are only 57k rows.
-------------
I like this way: `totalRows = mySheet.UsedRange.Rows.count`
-------------
This might be confusing wording. Why not:

    ByVal enable As Boolean

And then get rid of the Not

When I saw this thread, your answer was the first thing I thought of. I've witness my macros take 10 times longer with all this stuff enabled. 

Just make sure to do error catching that re-enables everything, OP. Otherwise you might get stuck in a situation where you don't know why nothing is working. 
-------------
This is the only database we are working with. I even tried it on a freshly imaged machine. Same issue. Super odd. I've got 32gb of ram so usage isn't an issue.

To be honest, its super odd.
-------------
I still run into the same problem. This is working for my coworker though.
-------------
I didn't write it, I got it from someone else.  It has worked for me in two different projects so I don't question why it is the way it is.
-------------
Restart the computer and see if it still is super-slow?




Put in break-points in the code and run with local window on to see if you're somehow trapped in an infinite loop?




Also don't forget to try other people's solutions...I'm just speaking from past experience without being able to fully replicate your issue.
-------------
That's strange. I did something similar, with regex (converting dates), for 50k+ rows and all the columns (typically 15 to 30) and it takes 12 seconds on my work PC (there is an `if` condition if the regex match something to convert though).  
  
I tried the same in C# and it took less than a second.... (same data source)
-------------
Just checking, but do you have other calculations on the sheet itself? It could be trying to calculate the workbook every time you change a cell.

could try adding this to the beginning:

     Application.Calculation = xlManual

Then this at the end of your code

     Application.Calculation = xlAutomatic
-------------
I do have some other calculations...I'll have to take a look and see if that's the case.
