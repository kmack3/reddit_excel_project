Did you know programming before learning VBA?
>Case in point : I've probably learned 5 times how a counter works and how to make one, but the information just doesn't stick with me.

This has very little to do with having a programming background and more to do with general knowledge deterioration. It happens with everything you do and everything you learn: if you don't actively use the skill or knowledge you'll eventually lose it. And the more you use it, the easier it is to pick up at a later time. 

If you were to spend half an hour each day doing VBA (writing it, debugging it or reviewing it), you'd probably be amazed at how much more you retain.

That said, I took a few years of computer science which helped a little because I understand basic programming architecture (loops, calls, variables, etc...) but this was fifteen years ago and if you were to ask me to program something in C, I just wouldn't be able to.

I'd argue the hardest part is learning structure. It's the reason why some of us can find answers very easily on Google and others can't.
I learnt programming and worked as a programmer using Basic in the 1970's before going on to do University and get a degree in Computer Science in 1986. I've worked on and off as a programmer, manager, project manager , business analyst ever since. (C, C++, Java, Python etc etc etc)

- VBA is a very simple form of programming
- a programming background still helps because you understand all the concepts involved (program structure, syntax rules, loops, error handling, optimisation, code reuse, parameters and variables, scope) - you name it.
- the use of debuggers, stepping through programs, breaking code down into simpler steps, understanding data types and type casting and coercion.

Is it mandatory? Probably not. Does it help? Absolutely.

It also helps in being taken seriously by other programmers - I take no shit.
Nope but learning about VBA made me interested in other languages, so far I've just messed around with python a bit though.
VBA was my introduction to programming. I moved on from there to SQL and R.

In a lot of ways, VBA is a good gateway into programming - after all, it is an implementation of Basic (which was designed as a learning language). This makes it relatively straightforward and easy to use.

Looking back on my experience - if you are new to programming and intend to use VBA to build tools for other people, I would definitely recommend taking a short introductory course. It's not strictly necessary, but it's extremely helpful.

Learning the basics of industrial programming conventions will ensure you write clean, robust, maintainable code. It will also help you avoid some of the more dangerous pitfalls (e.g. not explicitly defining your variables). The same things that make VBA easy to program, make it easy to program badly.
I've got to say, I didn't expect as many responses, and some really insightful ones at that!  I think it's great how accepting this sub is ; I've never seen someone be elitist or disparage someone because of their lack of knowledge.  Instead, everyone is really helpful and considerate. Thanks a lot guys.
I am from a finance background. I have absolutely no idea on VBA, yet I build complex macros for my department. I started with recording them and now I am able to write full fledged automation macros which help in tremendous amount of time save. You just continue doing what ever you are doing and you will learn by doing it more and more. 
I started with VB6 which is almost identical to VBA, but instead of VBA being specialised for Microsoft applications, VB6 is a more general tool for writing programs. Its outdated now, as newer versions of VB are out. 

I would not say it is a requirement however, VBA is a good first language. When learning, i used to come here to see if i could solve people's VBA issues. I still do it sometimes too. When i became a bit more competent i started writing my own Add-ins. 
I had some experience with C and C++, Python, and R from various school/uni/personal projects. So I understood general principles like declaring variables, loops, calling functions etc. But most of my formal programming learning was a long time ago, so when it came to VBA mainly I taught myself. Usually through lots of clumsy reverse-engineering and Googling.
I had very little experience with a few programming languages. But VBA was my first real comprehensive programming language. I read a book initially, but I didn't practice the examples as I was reading. So the concepts didn't stick. I then kept trying to do things with VBA in Excel, trying to remember what I read, and they didn't work. So I read and reread things, and eventually, things just clicked. Once simpler things started to click, I was able to focus more time on things I did not know. And then once I learned those things, I continued the process. The most difficult thing, conceptually, for me to understand initially were arrays and collections. The book I read, I felt, just covered arrays poorly. And collections are really powerful (I use collections with for-each-next loops all the time now) but they were really difficult for me to understand how to use initially. My advice would be to pickup a comprehensive book to learn the fundamentals. And from there, you can use Google to be able to sift through good (and bad) code to find what you need. I'd recommend either Power Programming with VBA (2013 or 2016) or VBA programming for Dummies. They're both under John Walkenbach, who's one of the world's foremost authorities on Excel, including VBA. Best of luck learning VBA!
Not at all - I learned programming by using the gateway drug - excel-influenced VBA.
I took a single intro programming class at my local college. The class was good, and was pretty beginner. You just marched through the java textbook, which was fine, and you could do on your own. The thing that helped me was the last test and the final was where you had to write a small class to tie together to finish a much larger project. This really helped force me into taking something that was beyond my ability and put it back together. 

After I did that, I was able to take a pretty fancy VBA interface to tool, and I learned (how to copy) the interface to the tool, and then I got ahold of the API for the tool, and the world was my vba oyster.

VBA is so simple that knowing too much of any language is going to infuriate you with how stupid VBA is, but it will only make it easier.
I took Fortran in college, and picked up Matlab by necessity in later classes. I started figuring out VBA a few years later, and I'm pretty competent by now. Although, I'm still prone to write code more like Fortran than like a more modern language.

That said, 

>our programming class got replaced by a class where we learn matlab instead of a more used language

Matlab scripting has all the basic structure that any other high-level programming language has. That is to say, if-then statements and for loops, variable types, functions. (And it's used fairly widely within engineering.)
I'm not a studied programmer but before I got to VBA I had some knowledge and experience with Pascal, C, PHP, Python and some random C-like macro tool for Ultima online.  
Not sure if I learned autohotkey before or after VBA
I did pascal.  But ultimately F1 (help), recording macros, and google taught me most.
I first learned VB6, before I ever touched any VBA. I was surprised at how similar the two were when I first learned that VBA was a part of the Office Suite. Now though, I'm definitely incorporating more of the .NET Framework into MS Office automation.

The toughest part about learning how to use VBA with Office is not VBA itself, but the object model of the Office suite.
No programming background for me. Only started learning VBA about 8 months ago. Initially was very reliant on the recorder but now I can write some code myself and fill in the gaps with Google. I'm still an amateur but I feel like I've made light years of progress during this time and still so much to learn. 
Yes
Ha you are spot on.

I came from the business and I used VBA to automate my job. The new CIO saw I was leaving and put me on the development team. I was not taken seriously for a while.

It wasn't until I was able to deliver 2 projects a week and then wrote in SQL, .Net, and several other languages that they decided I was part of the team.

I hope to go back to school, but I have to pay off my debt from my undergrad. 2027 should be the year I will be officially worth nothing!
Yep, same I used VBA to automate a few things in Access at work. Then moved onto Python because I enjoyed it.
The first two things I learned were to always use option explicit and comment my code!  The tools I wrote for other people were pretty simple and built in such a way that they shouldn't need to be modified, but I totally agree that a class would be very beneficial.  I'd like to go to an excel class, but I'm not sure there's any around, I live in a pretty small place.  I guess there's still online classes available.
Yeah, I'm in mechanical engineering, but even though we learn a little bit of Matlab, I don't even know of one business or enterprise who uses it around where I live or study.  We didn't even get really in depth, we saw how to make a simple loop, a counter, and didn't even learn about variable types.  We saw Excel, Mathcad and Matlab in the same class so we just had about three weeks worth of Matlab.
What do you mean by the object model?
An online introduction to programming would be good. Even if the class isn't specifically about VBA, you'd probably still get a lot out of it in terms of learning to think about efficient algorithm design etc.

You can always tell the difference between code written by an experienced programmer and code written by someone self-taught - even if the latter is more experienced in VBA itself.
If you're in mechanical engineering, Matlab is enormously popular in control systems. I've worked in the aerospace industry doing structural analysis, and have had it available at all of the big companies I've worked for.

Three weeks isn't really enough time, though. If you're learning 3 different pieces of software in one semester-long class, you're probably spending half the time just learning what buttons to push, and not learning about more fundamental stuff.
By object model, I mean how VBA interacts with the Office Suite Applications. Things like referencing syntax like `Worksheets(1)` to reference a worksheet object, or `Cells(1,1)` to reference cell `A1` on the active worksheet. And then knowing all of the properties and methods associated with these objects, and what they do, and what they are for. It's rather expansive, but it's how VBA meshes with the office application you're trying to work with.
Yep, exactly.  We learned how to do graphs in excel and how to use basic functions.  In Mathcad, we learned how to do graphs, and how to solve a symbolic equations.  In matlab, we learned how to write and modify matrices, a simple loop, a counter, and if-then-and-etc. statements.  Overall, it's such a tiny bit of everything that no real knowledge is transmitted.  I've had a couple of mechatronics classes where we did use matlab for control systems, but we really focused on the Simulink, Simscape and Stateflow.  I think everybody in my degree realises how powerful Matlab can be, but seeing as we've got other classes and don't learn it in a class, nobody puts in the time to really learn it.
